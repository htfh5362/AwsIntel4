ch6객체지향.txt


*객체지향언어(OOP - Object Oriented Programming)

객체지향이론의 기본 개념은 실제 세계는 사물(객체)로 이루어져 있으며,
발생하는 모든 사건들은 사물간의 상호작용이다 라는 것이다

실제 사물의 속성과 기능을 분석한 다음, 데이터(변수)와 함수로 정의함으로써
실제 세계를 컴퓨터 속에 옮겨 놓은 것과 같은 가상세계를 구현하고 
이 가상세계에서 모의실험을 함으로써 많은 시간과 비용을 절약할 수 있다

*객체지향 3대 특징
상속, 캡슐화, 다형성, (추상화)
1.코드의 재사용성이 높다
새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다
2.코드의 관리가 용이하다
코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다
3.신뢰성이 높은 프로그래밍을 가능하게 한다
제어자와 메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며,
코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다

코드의 재사용성이 높고 유지보수가 용이하다

공부할 때 주의사항: 너무 객체지향개념에 얽매여서 고민하기 보다는
일단 프로그램을 기능적으로 완성한 다음 
어떻게 하면 보다 객체지향적으로 코드를 개선할 수 있을지를 고민하여
점차 개선해 나가는 것이 좋다

*클래스와 객체

클래스란 객체를 정의해 놓은 것 또는 객체의 설계도 또는 틀이라고 정의한다
클래스는 객체를 생성하는데 사용되며, 객체는 클래스에 정의된 대로 생성된다

클래스 정의: 객체를 정의해 놓은 것
클래스 용도: 클래스는 객체를 생성하는데 사용된다

객체의 사전적 의미는 실제로 존재하는 것이다

객체의 정의: 실제로 존재하는 것. 사물 또는 개념
객체의 용도: 객체가 가지고 있는 기능과 속성에 따라 다름

유형의 객체: 책상, 의자, 자동차, TV와 같은 사물
무형의 객체: 수학공식, 프로그램 에러, 시간, 달력 같은 논리나 개념

클래스		객체
TV설계도		Tv
붕어빵 기계	붕어빵
		인스턴스화
클래스 ---------> 	인스턴스(객체)

*객체의 구성요소 - 속성과 기능
객체는 속성과 기능, 두 종류의 구성요소로 이루어져 있다

속성과 기능의 집합이라고 할 수 있는데 속성과 기능을 그 객체의 멤버(member, 구성원)라 한다

속성(property) - 멤버변수, 특성(attribute), 필드, 상태
기능(function) - 메서드(method), 함수, 행위(behavior)

TV 속성: 크기, 길이, 높이, 볼륨 등
TV 기능: 켜기, 끄기, 볼륨 높이기, 볼륨 낮추기, 채널 변경하기 등


*클래스의 또 다른 정의
클래스 - 데이터와 함수의 결합

변수 -> 배열 -> 구조체 -> 클래스
1.변수 - 하나의 데이터를 저장할 수 있는 공간
2.배열 - 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
3.구조체 - 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
4.클래스 - 데이터와 함수의 결합(구조체 + 함수)

*클래스 - 사용자 정의 타입(user-defined type)
프로그래밍 언어에서 제공하는 자료형 외에 프로그래머가 서로 관련된 변수들을
묶어서 하나의 타입으로 추가하는 것을 사용자 정의 타입이라고 한다
클래스 = 사용자 정의 타입이다


public class VariableBasic1 {	// 클래스 영역

	int iv;				// 인스턴스 변수
	static int cv;		// static 변수(공유변수)
	
	void method() {	// 메서드 영역
		int lv = 0;		// 지역변수
	}
	
}

					**변수의 종류와 특징
변수의 종류				선언위치					생성시기
static variable			클래스 영역				클래스가 메모리에 올라갈 때
instance variable		클래스 영역				인스턴스가 생성되었을 때
local variable			클래스 영역 이외의 영역		변수 선언문이 수행되었을 때
						(메서드, 생성자등)


1.인스턴스 변수
클래스 영역에 선언되며, 클래스의 인스턴스를 생성할 때 만들어진다
그렇기 때문에 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 먼저 인스턴스를 생성해야 한다
인스턴스는 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다

2.스태틱 변수
인스턴스마다 독립적인 저장공간을 갖는 인스턴스 변수와 달리, 스태틱 변수는 모든 인스턴스가
공통된 저장공간(변수)을 공유하게 된다. 한 클래스의 모든 인스턴스들이 공통적인 값을
유지해야하는 속성의 경우, 스태틱 변수로 선언해야 한다
스태틱 변수는 인스턴스 변수와 달리 인스턴스를 생성하지 않고도 언제든지 바로 사용할 수 있다
클래스명.스태틱변수와 같은 형식으로 사용한다
클래스가 메모리에 로딩(loading)될 때 생성되어 프로그램이 종료될 때 까지 유지되며,
프로그램 내에서 어디서나 접근할 수 있는 전역변수의 성격을 가질 수 있다

3.지역변수
메서드 내에 선언되어 메서드 내에서만 사용 가능하며, 메서드가 종료되면 소멸되어 사용할 수
없게 된다. for 또는 while문의 블럭 내에 선언된 지역변수는 
지역변수가 선언된 블럭{} 내에서만 사용 가능하며,
블럭{}을 벗어나면 소멸되어 사용할 수 없게 된다

*인스턴스 변수는 인스턴스가 생성될 때 마다 생성되므로 인스턴스마다 각기
다른 값을 유지할 수 있지만, 스태틱 변수는 모든 인스턴스가 하나의 저장공간을 공유하므로
항상 공통된 값을 갖는다


*JVM의 메모리구조
1.static Area
프로그램 실행 중 어떤 클래스가 사용되면, 
JVM은 해당 클래스의 클래스 파일(*.class)을 읽어서
분석하여 클래스에 대한 정보(클래스 데이터)를 이곳에 저장한다.
이 때, 그 클래스의 스태틱 변수(static variable)도 이 영역에 함께 생성된다

2.heap Area
인스턴스가 생성되는 공간. 프로그램 실행 중 생성되는 인스턴스는 모두 이곳에 생성된다
즉, 인스턴스변수(instance variable)들이 생성되는 공간이다

3.stack Area
스택은 메서드의 작업에 필요한 메모리 공간을 제공한다. 메서드가 호출되면 
스택에 호출된 메서드를 위한 메모리가 할당되며, 이 메모리는 메서드가 작업을
수행하는 동안 지역변수(매개변수 포함)들과 연산의 중간결과 등을 저장하는데 사용된다. 
그리고 메서드가 작업을 마치면 할당되었던 메모리공간은 반환되어 비워진다.

***스택의 특징***
-메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다
-메서드가 수행을 마치고 나면 사용했던 메모리를 반환하고 스택에서 제거된다
-스택의 제일 위에 있는 메서드가 현재 실행 중인 메서드이다
-아래에 있는 메서드가 바로 위의 메서드를 호출한 메서드이다.

