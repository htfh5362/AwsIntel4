JSP&Servlet 개념.txt

*서블릿의 생명주기와 관련된 메서드
init(), service(), destroy()

servlet 인터페이스에 정의된 5 개의 메서드 중에서
서블릿의 생성과 실행, 소멸, 즉 생명주기와
관련된 메서드이다

init()은 서블릿 컨테이너가 서블릿을 생성한 후 초기화 작업을 수행하기 위해
호출하는 메서드이다
서블릿이 클라이언트의 요청을 처리하기 전에 준비할 작업이 있다면 
이 메서드에 작성해야 한다
ex: db 연동, 프로퍼티 로딩 등 클라이언트 요청을 처리하는데 필요한 자원을
미리 준비한다

service()는 클라이언트가 요청할 때 마다 호출되는 메서드이다.
실질적으로 서비스 작업을 수행하는 메서드이다.
이 메서드에 서블릿이 해야할 일을 작성하면 된다
ex: 비즈니스 로직등

destroy()는 서블릿 컨테이너가 종료되거나 웹 어플리케이션이 멈출 때,
또는 해당 서블릿을 비활성화 시킬 때 호출된다.
따라서 이 메서드에는 서비스 수행을 위해 확보했던 자원을 
해제한다거나 데이터를 저장하는 등의 마무리 작업을 작성하면 된다
ex: db 객체 해제, 메모리 회수 등

getServletConfig()는 서블릿 설정 정보를 다루는 ServletConfig 객체를
반환한다. 이 객체를 통해 서블릿 이름과 서블릿 초기 매개변수 값,
서블릿 환경정보를 얻을 수 있다

getServletInfo()는 서블릿을 작성한 사람에 대한 정보라든가
서블릿 버전, 권리 등을 담은 문자열을 반환한다

*web.xml
web.xml 파일을 배치 기술서(Deployment Descriptor) 또는 약어로 
DD파일 이라고 부른다
웹 애플리케이션의 배치 정보를 담고 있는 파일이다. 따라서 서블릿을 
만들었으면 DD 파일에 배치 정보를 등록해야 한다
그래야만 클라이언트에서 해당 서블릿의 실행을 요청할 수 있다
DD 파일에 등록되지 않은 서블릿은 서블릿 컨테이너(웹 컨테이너)가 찾을 수 없다


*JSP 작성시 사용하는 태그와 클래스 등을 구성요소라고 한다.
한 페이지의 특징을 설정하는 디렉티브, HTML 사이에 자바 코드를 넣어서 원하는 화면을
만드는 스크립트 요소, 스크립트 요소를 줄이고 자바코드를 숨기면서 
웹 프로그램 기능을 하는 액션 태그 등이 JSP 기본 구성요소다

원래 한 페이지에서 다른 페이지로 객체를 전달할 수 없지만 전달하게 만드는 스코프 객체,
상태가 없는 JSP에서 상태를 만들어 사용하는 세션, 여러 화면을 보여주기 위한 모듈화,
객체를 만들지 않고도 이미 준비된 객체를 사용하는 기본 객체, 한 화면에서 다른 화면으로
이동하는 흐름 제어, 예외 발생 시 처리 방법, 저장되어 있는 환경변수를 사용하는 방법
모두가 중요한 JSP 구성요소다

-----------------

**웹 용어**
*서버와 클라이언트
문제를 해결해 달라고 요청하는 쪽이 클라이언트, 문제를 해결해서 돌려보내는 쪽이 서버다

*요청(Request)/응답(Response)
클라이언트가 서버에게 문제를 해결해달라고 요구하는 행위는 요청이라고 한다
반대로 서버가 문제를 해결해서 클라이언트에게 보여주는 행위는 응답이다.
웹 브라우저가 클라이언트이고, 웹 서버는 서버라 할 수 있다

*프로토콜(Protocol)
규약, 규칙, 약속
클라이언트 쪽에서 규약을 지킨 형태의 코드를 보내면 서버 쪽에서 
전송받은 코드를 해석하여 클라이언트에게 규약을 지킨 형태의 코드를
클라이언트에게 다시 보낼 수 있다. 
즉 클라이언트와 서버 간 전송을 위한 규약이 프로토콜이다

약속된 값을 클라이언트로 보낼 수 있는데 이를 응답 상태코드라고 한다

*웹 서버(Web server)
웹 서버는 서버쪽 컴퓨터에 있는 소프트웨어다. 클라이언트의 요청을 받아서
웹 페이지(HTML, 그림파일, CSS, 자바스크립트 등으로 구성된 문서)를 
클라이언트인 웹 브라우저에 응답하는 역할을 한다

웹은 World Wide Web의 줄임말로 문서들이 인터넷으로 연결된 컴퓨터 세계를 말한다
하이퍼텍스트는 글자뿐 아니라 그림처럼 보여줄 수 있는 내용물을 컴퓨터 사용자가
마우스나 키보드입력으로 요청할 때 바로 접근하고 사용할 수 있는 문서다

*HTTP(Hypertext Transfer Protocol)
웹 서버에서 서버-클라이언트 사이에 대화(request/response)를 할 수 있도록 만든 규약이다.
HTTP는 헤더와 바디로 구성된다.
HTTP의 요청과 응답에는 메시지가 포함되어 요청과 응답에 대한 상태를 알 수 있게 한다
서버는 요청 헤더 메시지를 읽고 클라이언트의 요청 사항을 파악한 다음 
클라이언트에게 응답을 보낸다
응답헤더에는 요청이 제대로 처리되었는지, 응답해주는 서버의 간단한 정보, 
응답 내용의 타입 및 인코딩, 응답 크기 등이 포함된다

*상태코드(Status Code)
클라이언트가 서버에게 요청하면, 서버는 요청을 처리한 다음 그 결과를 3자리 숫자로
된 상태코드와 함께 클라이언트에게 보내준다
성공 200이외에는 서버 쪽에서 오류가 발생했다고 볼 수 있어 오류코드라고도 한다

200 성공, 404 경로가 잘못됨, 500 서버쪽에서 문법적으로 예외발생은 꼭 기억하자

*상태(state) - 무상태/유상태(StateLess/StateFull)
HTTP를 통한 클라이언트와 서버 사이의 대화는 방금 전 대화를 기억하지 못하는 무상태다(stateLsee). 
서버는 웹 브라우저를 통해 받은 요청에 응답한 다음 연결을 끊는다
이 상태에서 클라이언트가 서버에게 요청을 하려면 서버에 다시 연결해야 한다
반면 DB 서버는 클라이언트와 나눈 대화를 기억한다(유상태, stateFull).
대화가 끝난 후 다시 연결하지 않아도 요청을 할 수 있다. DB 서버가 대화를 끝내려면
명시적으로 끝내야 한다.
HTTP Session을 무상태로 한 이유는 많은 클라이언트들의 요청에 의한 웹 서버의
과부하를 방지하기 위한 것이다.
그러나 DB 서버는 사용자가 제한적이므로 연결을 유지하는 편이 좋다

-------------

*동기(Synchronous)/비동기(ASynchronous) 전송
요청 후 응답이 올 때까지 다른 요청을 할 수 없는 전송을 동기하고 한다
새로운 요청을 하면 한 페이지 전체를 다시 불러온다. 응답할 때 마다 페이지 전체를 다시 
불러오고 프로그레스바가 작동한다. 요청한 다음 응답을 받아 화면을 보여주면서
백그라운드에서 서버로부터 데이터를 받는 등 다른 작업을 할 수 있는 전송상태를 
비동기라고 한다. 비동기 상태에서 서버는 필요한 데이터만 전송되도록 응답한다
AJAX(ASynchronous Javascript And XML)라는 이름으로 많이 사용하고 있다

*정적문서/동적문서
서버에서 클라이언트로 응답할 때 바디 부분은 HTML로 구성된다. HTML은 클라이언트인
웹 브라우저에 전달되어 화면에 출력된다. 서버에서는 변환이나 실행이 되지 않으며,
그대로 웹 브라우저에 전달된다. HTML과 같은 문서를 정적문서(static document)라고 한다
서버에서는 변환이나 실행을 하지 않다가 웹 브라우저에서 정상문자 입력 검증이나, 변환 혹은
실행을 하는 스크립트(자바스크립트)를 클라이언트 동적문서(dynamic document)라 한다.
HTML이나 스크립트 언어는 클라이언트 문서다. 스크립트는 브라우저에서 한 줄씩
인터프리터로 전달되어 실행된다. JSP/Servlet은 서버 문서이고,
컴파일되어 실행된 결과를 HTML로 만든다. JSP/Servlet는 서버에서 실행되며
클라이언트에게 응답하는 문서를 만들므로 동적문서다. 웹 프로그래밍은 클라이언트의 요청을 받아
웹 서버에서 JSP/Servlet을 실행하고 결과를 웹 브라우저로 응답하는 것이다

클라이언트 사이드 문서의 종류
-정적문서: HTML, CSS
-동적문서: 스크립트

서버 사이드 문서의 종류
-동적문서: JSP/Servlet

*HTTP Server
HTML, CSS, 자바스크립트로 구성된 문서는 서버에서 변환되거나 실행되지 않는다
이런 클라이언트 사이드 문서를 요청한 웹 브라우저로 응답해주는 서버가 HTTP 서버다
HTTP Server는 요청에 대한 응답만 한다

*웹 컨테이너(Web Container)
웹 서버에는 HTML을 클라이언트로 보내는 HTTP server, jsp/servlet을 실행하는 엔진,
엔진과 jsp/serlvet를 실행하는데 필요한 라이브러리 등을 포함한 웹 컨테이너가 있다
엔진은 jsp/servlet을 실행해 결과물인 html을 만든다
커넥터는 html을 http server로 보내 웹 브라우저가 응답하게 한다

*서블릿
서블릿은 컨테이너에서 실행되는 프로그램이다
다시 말해 서블릿은 웹 서버(Tomcat)의 컨테이너(카탈리나)에서 실행되는 웹 프로그래밍이다
요청 또는 요청과 동반하는 파라미터를 서블릿에서 받아 요청을 처리하고 
결과를 HTML로 만든다 
웹 브라우저는 응답으로 보내진 HTML을 받아서 화면에 출력한다

*라이프사이클(Life Cycle)
웹 프로그래밍은 컨테이너가 반드시 필요하며,
프로그래밍을 엔진에서 실행하여 원하는 결과를 생성한다
컨테이너의 명령에 따라 생성, 초기화, 실행, 소멸 등 정해진 행동을 한다
이렇게 하는 것을 라이프 사이클이라고 한다
컨테이너는 요청에 따라 정해진 메서들를 호출한다.
요청을 처음으로 받으면 서블릿을 생성한다
초기화 메서드를 호출하여 생성된 서블릿을 실행하는데 필요한 데이터나 값을 얻는다
실행 메서드를 호출하여 요청을 처리하고 결과를 응답해준다.
두 번째 요청부터는 실행 메서드만 호출한다
더 이상 요청이 없다면 소멸 메서드를 호출하여 자원을 회수하고,
서블릿의 객체를 제거한다
컨테이너는 초기화와 소멸 메서드를 한 번만 호출한다

*JSP(Java Server Page)
jsp 중 server page는 서버에서 실행되는 라이프사이클이 있는 
웹 프로그래밍용 클래스를 말한다.
java는 개발 언어를 가리킨다. Tomcat 웹 서버에서 엔진이 jsp를 
서블릿으로 변환한다.
hello.jsp를 만들면 org.apache.jsp.hello_jsp.java와 같이
서블릿으로 변환되고 org.apache.jsp.hello_jsp.class로 컴파일된 다음 실행된다
JSP도 서블릿이므로 서블릿에서 사용하는 객체나 메서드를 JSP에서도 사용할 수 있다

*웹 컴포넌트
컨테이너에서 실행될 수 있도록 필요한 규칙을 준수한 웹 프로그램 묶음을 
웹 컴포넌트라고 한다
예를 들어 컴퓨터의 마더보드는 여러 카드를 꽂을 수 있는 구멍(슬롯)이 있고,
각 카드는 정해진 목적이 있다.
목적을 이루기 위해 여러 부속품으로 여러 카드를 만든다.
JSP나 서블릿은 부속품에, 웹 컴포넌트는 각 카드에 해당한다
각 카드는 마더보드에 꽂혀야 실행된다
슬롯 설치 시 반드시 규칙을 지켜야 하는데,
웹 컴포넌트에서도 API라는 규칙을 반드시 지켜야한다.
따라서 웹 프로그래밍은 웹 컴포넌트를 만드는 방법,
웹 컴포넌트와 웹 컨테이너 사이의 규칙을 배우는 것이라 할 수 있다

*컨텍스트(Context)
배포단위, 실행단위의 디렉터리를 컨텍스트라고 한다.
개발 후 JSP나 서블릿, 그림, HTML, web.xml을 압축하여 묶어서 (아카이브)war를 만든다.
이 war를 웹 컨테이너에 놓으면 압축이 풀려 실행을 위한 디렉터리가 된다.
이 디렉터리가 바로 컨텍스트이며 모든 파일을 각 용도에 맞게 컨텍스트 안의
디렉터리에 놓아야 한다
컨테이너는 컨텍스트의 web.xml을 가장 먼저 한 번 읽어들인다.

와스
*WAS(Web Application Server - Java Enterprise Edition Server)
WAS는 Web Server + Application Server + Service의 의미다
웹 서버는 jsp/servlet를 위한 웹 컨테이너와 html을 서비스하는 http server가 있다
application server에서는 비즈니스 로직을 수행하는 EJB(Bean) 컨테이너가 있다
서비스는 JNDI, JMS, JavaMail등을 제공하며 다른 기능의 서버와 연결하여 
사용하게 하거나 서버 안에서 편리하게 사용할 수 있게 한다
Enterprise Edition의 필수요소를 모두 구현한 서버를 Enterprise Edition Server 
또는 WAS라 부른다.
WAS에는 WebLogic, WebSphere, JBoss, Zeus 등 수많은 제품이 있다
Tomcat을 WAS로 부르기도 한다.

*레이어(Layer)/티어(Tier)
레이어는 프로그램의 역할에 따라 논리적으로, 티어는 시스템의 역할에 따라 물리적으로 나눈 것이다
혼용되기도 하지만 논리적인 것과 물리적인 것으로 구분된다
데이터베이스에서 DVD 대출 정보를 찾아 웹 브라우저에 출력하는 웹 프로그래밍을 한다고 가정해보자
DVD 대출 프로그램은 데이터베이스에 접근해 정보를 가져오는 부분(Data Layer)
, 고객정보인지 비디오 정보인지 요청을 판단하고 실행하는 부분(Business Layer)
, HTML로 결과를 만들고 응답하는 부분(Presentation Layer)으로 나눌 수 있다
DVD 대출 프로그램은 역할에 따라 나눌 수 있으며 이를 레이어라 한다
데이터베이스 서버, 웹 서버, 클라이언트인 웹 브라우저등 시스템을 물리적으로 나눌 수 있는데
이것을 티어라고 한다. 웹 프로그래밍은 기본적으로 3티어다
레이어는 보통 4개로 나눈다

-화면 레이어: jsp와 서블릿이 담당한다. 요청을 받아 비즈니스 레이어에 정보를 요청한다
결과를 받아 요청한 화면을 동적으로 만들고, 요청한 화면으로 옮긴다
-데이터 레이어: 영속성 레이어로도 알려진 레이어로, 데이터베이스에 쿼리를 실행한다
데이터베이스에 접근하여 쿼리를 실행하기 위해 JDBC를 이용하거나, 해당 쿼리에
대해 JDBC 작업을 자동으로 실행해 쉽게 사용할 수 있도록 만든 프레임워크를 사용한다
-비즈니스 레이어: 화면 레이어는 데이터 레이어를 이용한다.
비즈니스 레이어에서 얻은 객체를 비즈니스 객체라고 하며, 데이터베이스의 테이블과 관련이 있다
데이터 레이어에서 얻은 결과로 화면 레이어에서 필요한 비즈니스 객체를 만들어도 된다

*DAO(Data Access Object - 데이터 접근 객체)
데이터베이스에 관련된 작업(CR: Retrieve UD)을 전문적으로 담당하는 객체다
DAO 안의 메서드는 모두 데이터베이스와 관련된 작업을 한다
아래와 같이 CRUD를 실행하는 메서드는 JDBC등을 이용하여 데이터베이스에 접근해서
쿼리를 실행한다
다른 개발자도 해당 메서드를 호출하면 해당 쿼리를 실행하여 결과를 얻을 수 있다

*DTO(Data Transfer Object, 데이터 전송 객체)
*VO(Value Object, 데이터 객체)
데이터베이스의 테이블에 해당하는 객체로 테이블의 컬럼들을 일대일로 저장할 수 있는
멤버필드가 있고 get/set 메서드를 갖는다.
DTO는 로직이 없으며 일반적으로 하나의 DTO가 하나의 행에 해당되고, 대부분
DAO와 같이 사용된다. 비즈니스 레이어에서 반환하는 Business 객체를 DTO로 보면 된다

*MVC 패턴(Model - View - Controller)
MVC 패턴은 요청을 처리하는 과정에서 발생하는 처리순서, 데이터 전송, 관리 작업과
데이터 출력에 대한 웹 애플리케이션 작업을 간단하게 도식화한다.
요청을 받은 컨트롤러는 요청을 분석한다. 요청에 해당하는 모델을 이용하여
비즈니스 로직(데이터베이스에 관련된 작업)을 실행하고 비즈니스 객체를 얻는다.
해당 뷰로 제어권을 넘긴다. 뷰는 받은 비즈니스 객체를 동적으로 처리하고
HTML로 화면을 만들어 웹 브라우저에 응답한다.

----------------

*웹 프로젝트 폴더 구조
1src
자바소스 파일을 두는 폴더
서블릿 클래스나 필터, 리스너 등 필요한 모든 자바 클래스 파일을 둔다
프로퍼티 파일도 이 폴더에 둔다

2build/classes
컴파일된 자바 클래스 파일이 놓이는 폴더이다
물론 패키지에 소속된 클래스인 경우 이 폴더에 해당 패키지가 자동으로 만들어진다

3WebContent(webapp로 변경되었다)
Html, CSS, JavaScript, jsp, 이미지 파일 등 웹 컨텐츠를 두는 폴더이다
웹 앱플리케이션을 서버에 배치할 때 이 폴더의 내용물이 그대로 복사된다

4WebContent/WEB-INF
웹 애플리케이션의 설정과 관련된 파일을 두는 폴더이다
이 폴더에 있는 파일은 클라이언트에서 요청할 수 없다
따라서 html이나 자바스크립트, css등 클라이언트에서 요청할 수 있는 
파일들을 이 폴더에 두어서는 안된다.(보안 영역)

5WebContent/WEB-INF/lib
자바 아카이브 파일을 두는 폴더이다. 아카이브란?
기록보관소라는 뜻이다. 즉 아카이브 파일은 클래스 파일과 프로퍼티들을 
모아 놓은 보관소 파일이다. 이러한 이유로 Java ARchive의 합성어를 확장자 명
(.jar)로 사용하고 있다.

--------------------------------------------

*HTTP 요청 메서드
웹 서버나 웹 애플리케이션 서버는 서버-클라이언트 사이의 요청/응답용 프로토콜로 
HTTP를 지원한다
HTTP는 헤드와 바디로 나뉘며, 전송데이터를 보내는 방법에 따라 요청 메서드 종류가 달라진다
JSP/Servlet은 get, post를 주로 사용하고 head는 가끔 사용한다

get: 서버에 요청 메서드를 보낼 때 헤드에만 내용이 있고 바디에는 전송데이터가 없다
요청을 간단하게 하기 위한 것으로 헤드에 포함되는 내용의 크기도 제한적이다.
또한 URL에 전송 데이터가 노출될 수 있다.
특징
1.url에 데이터를 포함 -> 데이터 조회에 적합
2.바이너리 및 대용량 데이터 전송 불가
3.요청라인과 헤드 필드의 최대 크기
http 사양에는 제한사항 없음
대용량 url로 인한 문제 발생 -> 웹 서버에 따라 최대 크기 제한
보안에 좋지 않다
즐겨찾기 가능

post: 서버에 보낼 전송 데이터를 바디에 넣어서 요청한다. form을 이용하여 전송데이터를
서버로 보낼 때 사용한다. 전송데이터 크기에 제약이 없다
특징
1.url에 데이터가 포함되지 않음 -> 외부 노출 방지
2.메시지 본문에 데이터 포함 -> 실행 결과 공유 불가
3.바이너리 및 대용량 데이터 전송 가능


head: 응답용으로 사용되며 헤드에만 내용이 있다. 바디 없이 헤드정보, 캐시정보를
클라이언트에 보낼 때 사용한다

--------------

*Statement 			VS 		PreparedStatement
-Statement
실행속도			질의할 때마다 SQL문을 컴파일한다
바이너리 데이터 전송	불가능
프로그래밍 편의성	sql문 안에 입력 매개변수 값이 포함되어 있어서 sql문이 복잡하고
				매개변수가 여러 개인 경우 코드 관리가 힘들다
보완성			해킹을 당할 우려가 있음

-PreparedStatement
실행속도			sql문을 미리 준비하여 컴파일 해둔다. 입력 매개변수 값만 추가하여
				서버에 전송한다. 특히 여러 번 반복하여 질의하는 경우, 실행속도가 빠름
바이너리 데이터 전송	가능
프로그래밍 편의성	sql문과 입력 매개변수가 분리되어 있어서 코드 작성이 편리하다
보완성			해킹 불가능